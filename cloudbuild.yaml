# cloudbuild.yaml
steps:
  # 缓存构建依赖
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest || exit 0
    id: 'pull-cache'

  # 多阶段构建
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest',
      '.'
    ]
    id: 'build-image'
    waitFor: ['pull-cache']

  # 推送镜像
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}::latest']
    id: 'push-image'

  # 部署到 Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', '${_SERVICE_NAME}',
      '--image', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}::latest',
      '--region', '${_REGION}',
      '--platform', 'managed',
      '--port', '8501',
      '--memory', '${_MEMORY}',
      '--cpu', '${_CPU}',
      '--max-instances', '${_MAX_INSTANCES}',
      '--min-instances', '${_MIN_INSTANCES}',
      '--timeout', '3600',
      '--concurrency', '80',
      '--set-env-vars', '${_VAR}',
      '--allow-unauthenticated',
      '--tag', '${_ENVIRONMENT}'
    ]
    id: 'deploy'


  # 部署后测试
  - name: 'gcr.io/cloud-builders/curl'
    args: [
      '-f', '-s',
      '$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.url)")/health'
    ]
    id: 'health-check'
    waitFor: ['deploy']

  # 清理旧版本
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 保留最新的 5 个版本，删除其他版本
        gcloud run revisions list --service=${_SERVICE_NAME} --region=${_REGION} --format="value(metadata.name)" --sort-by="~metadata.creationTimestamp" --limit=100 | tail -n +6 | while read revision; do
          echo "Deleting old revision: $revision"
          gcloud run revisions delete $revision --region=${_REGION} --quiet || true
        done
    id: 'cleanup'
    waitFor: ['health-check']

substitutions:
  _SERVICE_NAME: 'job-insight-analysis'
  _REGION: 'us-east1'
  _ENVIRONMENT: 'staging'
  _MEMORY: '2Gi'
  _CPU: '1'
  _MAX_INSTANCES: '2'
  _MIN_INSTANCES: '1'
  _VAR: "CURRENT_ENV=aws,LOGGING_LEVEL=INFO,DATABASE_PROCESSED_DATA_PATH=data/processed_job_data.duckdb,AWS_ACCESS_KEY_ID=AKIAU5LH6C46TRJNBINZ,AWS_SECRET_ACCESS_KEY=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,AWS_DEFAULT_REGION=us-east-1,AWS_S3_BUCKET=job-insight-104"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'

timeout: '1800s'