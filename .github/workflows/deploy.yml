# .github/workflows/deploy.yml
name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: job-insight-analysis
  REGION: us-east1
  VAR: ${{ secrets._VER }}

jobs:
  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run code formatting check
        run: |
          black --check .
          isort --check-only .

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          pytest tests/ -v || echo "No tests found"

  # ÊûÑÂª∫ÂíåÈÉ®ÁΩ≤
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker


      - name: Build and Deploy using Cloud Build
        run: |
          gcloud builds submit \
            --config cloudbuild.yaml \
            --substitutions _SERVICE_NAME=${{ env.SERVICE_NAME }} \
            --substitutions _REGION=${{ env.REGION }} \
            --substitutions _ENVIRONMENT=${{ env.ENVIRONMENT }} \
            .

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üåê Service URL: $SERVICE_URL"

      - name: Health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30

          SERVICE_URL="${{ steps.get-url.outputs.SERVICE_URL }}"

          # ÂÅ•Â∫∑Ê£ÄÊü•
          for i in {1..5}; do
            if curl -f -s "$SERVICE_URL" > /dev/null; then
              echo "‚úÖ Service is healthy"
              exit 0
            else
              echo "‚è≥ Attempt $i: Service not ready yet, waiting..."
              sleep 10
            fi
          done

          echo "‚ùå Service health check failed"
          exit 1

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const serviceUrl = '${{ steps.get-url.outputs.SERVICE_URL }}';
            const environment = '${{ env.ENVIRONMENT }}';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deployment Successful**

              **Environment:** ${environment}
              **Service URL:** ${serviceUrl}
              **Commit:** ${context.sha.substring(0, 7)}

              The application has been deployed and is ready for testing!`
            });